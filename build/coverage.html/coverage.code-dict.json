{"/home/travis/build/npmtest/node-npmtest-gulp-phpcs/test.js":"/* istanbul instrument in package npmtest_gulp_phpcs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpcs/lib.npmtest_gulp_phpcs.js":"/* istanbul instrument in package npmtest_gulp_phpcs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_phpcs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_phpcs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpcs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-phpcs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_phpcs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_phpcs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_phpcs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_phpcs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_phpcs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_phpcs.__dirname +\n                    '/lib.npmtest_gulp_phpcs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-phpcs/node_modules/gulp-phpcs/index.js":"var util = require('util'),\n    path = require('path'),\n    gutil = require('gulp-util'),\n    through = require('through2'),\n    which = require('which'),\n    spawn = require('child_process').spawn;\n\n/**\n * Builds shell command for PHP Code Sniffer according to specified options.\n *\n * @param {Object} opts List of PHP Code Sniffer options.\n * @returns {Object} Object with \"bin\" and \"args\" keys that specify shell command.\n */\nvar buildCommand = function(opts) {\n    var args = [];\n\n    if (opts.hasOwnProperty('standard')) {\n        args.push('--standard=' + opts.standard);\n    }\n\n    if (opts.hasOwnProperty('severity')) {\n        args.push('--severity=' + parseInt(opts.severity));\n    }\n\n    if (opts.hasOwnProperty('warningSeverity')) {\n        args.push('--warning-severity=' + parseInt(opts.warningSeverity));\n    }\n\n    if (opts.hasOwnProperty('errorSeverity')) {\n        args.push('--error-severity=' + parseInt(opts.errorSeverity));\n    }\n\n    if (opts.hasOwnProperty('encoding')) {\n        args.push('--encoding=' + opts.encoding);\n    }\n\n    if (opts.hasOwnProperty('showSniffCode') && opts.showSniffCode) {\n        args.push('-s');\n    }\n\n    var useSniffs = opts.hasOwnProperty('sniffs') &&\n        Array.isArray(opts.sniffs) &&\n        opts.sniffs.length !== 0;\n    if (useSniffs) {\n        args.push('--sniffs=' + opts.sniffs.join(','));\n    }\n\n    var useExclude = opts.hasOwnProperty('exclude') &&\n        Array.isArray(opts.exclude) &&\n        opts.exclude.length !== 0;\n    if (useExclude) {\n        args.push('--exclude=' + opts.exclude.join(','));\n    }\n\n    if (opts.hasOwnProperty('colors') && opts.colors) {\n        args.push('--colors');\n    }\n\n    return {\n        bin: opts.bin || 'phpcs',\n        args: args\n    };\n};\n\n/**\n * Resolves real path of the command.\n *\n * The results are cached inside of the function.\n *\n * @type Function\n * @param {String} bin A command which should be resolved.\n * @param {Function} callback A function which will be called onece the command\n * is resolved or a error occurs. The error object (or null) is passed as the\n * first argument. The real path of the command is passed as the second argument.\n * If the command is not found the second argument is boolean false.\n */\nvar resolveCommand = (function(){\n    // Closure is used here to cache resolved commands.\n    var cache = {};\n\n    return function(bin, callback) {\n        if (cache.hasOwnProperty(bin)) {\n            return callback(null, cache[bin]);\n        }\n\n        var normalizedBin = path.normalize(bin.replace(/[\\\\/]/g, path.sep));\n        which(normalizedBin, function(err, resolved) {\n            if (err) {\n                if (err.code !== 'ENOENT') {\n                    // Something is totally wrong. Let the outer code know.\n                    return callback(err);\n                }\n\n                // The command is just not found.\n                cache[bin] = false;\n\n                return callback(null, false);\n            }\n\n            cache[bin] = resolved;\n            callback(null, resolved);\n        });\n    };\n})();\n\n/**\n * Runs Code Sniffer shell command.\n *\n * @param {String} bin Shell command (without arguments) that should be performed\n * @param {Array} args List of arguments that should be passed to the Shell command.\n * @param {Object} file A file from Gulp pipeline that should be sniffed.\n * @param {Function} callback A function which will be called when Code Sniffer is\n * done or an error occurs. It will recieve three arguments: error instance, exit\n * code and output of the Code Sniffer. The last two arguments will be passed in\n * only if there was no error during execution.\n */\nvar runCodeSniffer = function(bin, args, file, callback) {\n    resolveCommand(bin, function(error, resolvedBin) {\n        if (error) {\n            // A real error occurs during command resolving. We can do nothing\n            // here, so just let the developer know.\n            var wrappedError = new Error(util.format(\n                'Cannot resolve real path of \"%s\"',\n                bin\n            ));\n            wrappedError.originalError = error;\n\n            return callback(wrappedError);\n        }\n\n        if (resolvedBin === false) {\n            // The bin is not found. Let the developer know about it.\n            return callback(new Error(util.format('Cannot find \"%s\"', bin)));\n        }\n\n        // A buffer for PHPCS stdout stream.\n        var stdout = '';\n        // child_process.spawn is used instead of child_process.exec because of\n        // its flexibility.\n        var phpcs = spawn(resolvedBin, args);\n\n        phpcs.on('error', function(error) {\n            callback(error);\n        });\n\n        phpcs.on('close', function(code) {\n            callback(null, code, stdout);\n        });\n\n        phpcs.stdin.on('error', function(error) {\n            // Just ignore this event because an error (with more\n            // detailed description) should also be emitted at spawned\n            // process instance.\n        });\n\n        phpcs.stdout.on('data', function(data) {\n            // Just buffer data from stdout to use it later.\n            stdout += data.toString();\n        });\n\n        // Detect line endings like it's done in PHPCS\n        var matches = /\\r\\n?|\\n/.exec(file.contents.toString()),\n            eol = matches ? matches[0] : '\\n';\n\n        // Pass the file name to Code Sniffer. This is needed to\n        // get the correct error message from Code Sniffer.\n        phpcs.stdin.write('phpcs_input_file: ' + file.path + eol);\n\n        // Pass content of the file as STDIN to Code Sniffer\n        phpcs.stdin.write(file.contents);\n        phpcs.stdin.end();\n    });\n};\n\nvar phpcsPlugin = function(options) {\n    var command = buildCommand(options || {});\n\n    return through.obj(function(file, enc, callback) {\n        var stream = this;\n\n        if (file.isNull()) {\n            stream.push(file);\n            callback();\n\n            return;\n        }\n\n        if (file.isStream()) {\n            stream.emit('error', new gutil.PluginError('gulp-phpcs', 'Streams are not supported'));\n            callback();\n\n            return;\n        }\n\n        runCodeSniffer(command.bin, command.args, file, function(runError, exitCode, output) {\n            if (runError) {\n                // Something is totally wrong. It seems that execution of Code Sniffer\n                // failed (not because of non-zero exit code of PHPCS).\n                stream.emit('error', new gutil.PluginError('gulp-phpcs', runError));\n                callback();\n\n                return;\n            }\n\n            if (exitCode > 1) {\n                // On codding style problems Code Sniffer should exists with \"1\" code.\n                // All other non-zero exit codes should be treated as Code Sniffer errors.\n                var phpcsError = new gutil.PluginError('gulp-phpcs', 'Execution of Code Sniffer Failed');\n                phpcsError.stdout = output;\n                stream.emit('error', phpcsError);\n                callback();\n\n                return;\n            }\n\n            var report = {\n                error: false,\n                output: ''\n            };\n\n            if (exitCode === 1) {\n                // A codding style problem is found. Attache report to the file to allow\n                // reporters do their job.\n                report.error = true;\n                report.output = output;\n            }\n\n            file.phpcsReport = report;\n            stream.push(file);\n            callback();\n        });\n    });\n};\n\n// Attach reporters loader to the plugin.\nphpcsPlugin.reporter = require('./reporters');\n\nmodule.exports = phpcsPlugin;\n","/home/travis/build/npmtest/node-npmtest-gulp-phpcs/node_modules/gulp-phpcs/reporters/index.js":"var gutil = require('gulp-util'),\n    fs = require('fs');\n\n/**\n * Loads reporter by its name.\n *\n * The function works only with reporters that shipped with the plugin.\n *\n * @param {String} name Name of a reporter to load.\n * @param {Object} options Custom options object that will be passed to\n *   a reporter.\n * @returns {Function}\n */\nmodule.exports = function(name, options) {\n    if (typeof name !== 'string') {\n        throw new gutil.PluginError('gulp-phpcs', 'Reporter name must be a string');\n    }\n\n    if (name === 'index') {\n        throw new gutil.PluginError('gulp-phpcs', 'Reporter cannot be named \"index\"');\n    }\n\n    var fileName = './' + name + '.js',\n        reporter = null;\n    try {\n        reporter = require(fileName)(options || {});\n    } catch(error) {\n        if (error.code !== 'MODULE_NOT_FOUND') {\n            throw error;\n        }\n\n        throw new gutil.PluginError('gulp-phpcs', 'There is no reporter \"' + name + '\"');\n    }\n\n    return reporter;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-phpcs/node_modules/gulp-phpcs/reporters/fail.js":"var gutil = require('gulp-util'),\n    through = require('through2'),\n    chalk = require('chalk');\n\n/**\n * Returns \"fail\" reporter.\n *\n * The \"fail\" reporter rises an error on files stream if PHP Code Sniffer fails\n * for at least one file.\n *\n * @returns {Function}\n */\nmodule.exports = function(options) {\n    var phpcsError = false;\n    var badFiles = [];\n\n    // Set failOnFirst true by default\n    options = options || {};\n    if (!options.hasOwnProperty('failOnFirst')) {\n        options.failOnFirst = true;\n    }\n\n    return through.obj(\n        // Watch for errors\n        function(file, enc, callback) {\n            var report = file.phpcsReport || {};\n\n            if (report.error) {\n                phpcsError = true;\n\n                if (options.failOnFirst) {\n                    var errorMessage = 'PHP Code Sniffer failed' +\n                        ' on ' + chalk.magenta(file.path);\n\n                    this.emit('error', new gutil.PluginError('gulp-phpcs', errorMessage));\n                    callback();\n\n                    return;\n                }  else {\n                    badFiles.push(chalk.magenta(file.path));\n                }\n            }\n\n            this.push(file);\n            callback();\n        },\n\n        // Abort if we had at least one error.\n        function(callback) {\n            // We have to check \"failOnFirst\" flag to make sure we did not\n            // throw the error before.\n            if (phpcsError && !options.failOnFirst) {\n                this.emit('error', new gutil.PluginError(\n                    'gulp-phpcs',\n                    'PHP Code Sniffer failed on \\n    ' + badFiles.join('\\n    ')\n                ));\n            }\n\n            callback();\n        });\n};\n"}